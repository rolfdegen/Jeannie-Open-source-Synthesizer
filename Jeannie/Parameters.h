// Values below are just for initialising and will be changed when synth 
// is initialised to current panel controls & EEPROM settings


byte midiChannel = MIDI_CHANNEL_OMNI;//(EEPROM)
byte midiOutCh = 0;//(EEPROM)
String patchName = INITPATCHNAME;
boolean encCW = true;//This is to set the encoder to increment when turned CW - Settings Option
float oscALevel = 1.0f;
float oscBLevel = 1.0f;
float noiseLevel = 0.0f;
int unison = 0;
int oscFX = 0;
float detune = 0.06f;
//float currentDetune = 0.0f;
uint32_t chordDetune = 0;
float lfoSyncFreq = 1.0f;
float midiClkTimeInterval = 0.0f;
float lfoTempoValue = 1.0f;
int pitchBendRange = 12;
float modWheelDepth = 1.0f;
float keytrackingAmount = 0.5f;//Half - MIDI CC & settings option
float keytrackingValue = 0;
float glideSpeed = 0.0f;
int oscPitchA = 0;
int oscPitchB = 12;
int oscTranspose = 0;
float oscMasterTune = 0.0f;
float pitchEnv = 0.0f;
float pitchEnvA = 0.0f;
float pitchEnvB = 0.0f;
int oscWaveformA = WAVEFORM_SQUARE;
int oscWaveformB = WAVEFORM_SQUARE;
int currentWaveformA = oscWaveformA;
int currentWaveformB = oscWaveformB;
int currentOsc1WaveBank = 0;
int currentOsc2WaveBank = 0;
float pwmAmtA = 1.0f;
float pwmAmtB = 1.0f;
float pwmRate = 0.5f;
float pwmRateA = 0.5f;
float pwmRateB = 0.5f;
float pwA = 0.0f;
float pwB = 0.0f;
float mypwA = 0.0f;
float mypwB = 0.0f;
int pwmSource = PWMSOURCELFO;
float myFilVelocity = 0.0f;
float myAmpVelocity = 0.0f;

//float filterRes = 1.1f; // Filter_variable
float filterRes = 0.0f; // Ladder Filter
float filterFreq = 12000.0f;
float filterOctave = 1.0f;
float filterMix = 0.0f;
int filterMixStr = 0;//For display
float filterEnv = 0.0f;
float oscLfoAmt = 0.0f;
float ccModwheelAmt = 0.0f;
float oscLfoRate = 4.0f;
int oscLFOWaveform = WAVEFORM_SINE;
int oscLfoRetrig = 0;
int oscLFOMidiClkSync = 0;//MIDI Only
String oscLFOTimeDivStr = "";//For display
float filterLfoRate = 2.0f;
int filterLfoRetrig = 0;
int filterLFOMidiClkSync = 0;
String filterLFOTimeDivStr = "";//For display
float filterLfoAmt = 0.0f;
int filterLfoWaveform = WAVEFORM_SINE2;
int myFilterLFORateValue = 0;

float filterAttack = 100.0f;
float filterDecay = 350.0f;
float filterSustain = 0.7f;
float filterRelease = 300.0f;
float filterDelay = 0.0f;
float filterHold = 0.0f;

float ampAttack = 10.0f;
float ampDecay = 35.0f;
float ampSustain = 1.0f;
float ampRelease = 300.0f;
float ampDelay = 0.0f;
float ampHold = 0.0f;
float fxAmt = 1.0f;
float fxMix = 0.0f;
uint8_t FxPot1Val = 0;
uint8_t FxPot2Val = 0;
uint8_t FxPot3Val = 0;
uint8_t FxPot4Val = 0;
int velocitySens = 0;//Default off - settings option
boolean vuMeter = false;
boolean ARPSEQstatus = 0;
boolean myFxDSP = true;
boolean myPageShiftStatus [10];
float driveLevel = 1.0f;
uint8_t myUnisono = 0;
uint8_t SDErrorFlag = 0;
uint8_t WShaperNo = 0;
float WShaperDrive = 1.0f;
uint8_t PatchBankNo = 0;
uint8_t SeqNote1Buf[64];
uint8_t SeqNoteCount[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
uint8_t SeqVeloBuf[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
uint8_t SeqNoteBufStatus[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
uint8_t SeqOctavStep[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};	
boolean SEQrunStatus = false;
boolean SEQrunOneNote = false;
uint8_t SEQPatternNo = 0;
uint8_t oldPatternNo = 1;
String patternName = INITPATTERNNAME;
uint8_t SeqRecNoteCount = 0;
uint8_t SeqSmallestNoteStep = 0;
int ErrorCount = 0;
volatile boolean PrgChangeTask = false;

//Pick-up - Experimental feature
//Control will only start changing when the Knob/MIDI control reaches the current parameter value
//Prevents jumps in value when the patch parameter and control are different values
boolean pickUp = true;//settings option (EEPROM)
boolean pickUpActive = true;
#define TOLERANCE 2 //Gives a window of when pick-up occurs, this is due to the speed of control changing and Mux reading
int filterfreqPrevValue = 0;//Need to set these when patch loaded
boolean cutoffPickupFlag = false;
float filterMixPrevValue = 0.0f;//Need to set these when patch loaded
float resonancePrevValue = 0.0f;//Need to set these when patch loaded
float oscLfoAmtPrevValue = 0.0f;//Need to set these when patch loaded
float oscLfoRatePrevValue = 0.0f;//Need to set these when patch loaded
float filterLfoRatePrevValue = 0.0f;//Need to set these when patch loaded
float filterLfoAmtPrevValue = 0.0f;//Need to set these when patch loaded
float fxAmtPrevValue = 0.0f;//Need to set these when patch loaded
float fxMixPrevValue = 0.0f;//Need to set these when patch loaded
float LFO1phase = 180.0f;
float LFO2phase = 180.0f;
uint16_t CPUdegree = 0;
uint16_t CPUdegree_temp = 0;
uint8_t CPUaudioMem = 0;
int8_t SEQselectStepNo = 0;
uint8_t SEQpitchValue = 0;
unsigned long SEQclkRate = 1000000; // 60BPM (20- 275BPM)
float SEQdivValue = 0.25f;
uint16_t SEQbpmValue = 50;
uint8_t SEQdividerValue = 0;
uint8_t SEQstepNumbers = 15;
uint8_t SEQstepTime = 0.5f;
uint8_t SEQdirection = 0;
boolean SEQdirectionFlag = false;
uint8_t SEQmode = 0;
int SeqTranspose = 0;
int dummy1;
int dummy2;
boolean Keylock = false;
float SEQGateTime = 2.0f;	// 1.01f - 15.0f
uint32_t gateTime = 0;
uint32_t Interval = 0;
int oscDetuneSync = 1;
uint8_t Voice1LEDtime = 0;
uint8_t Voice2LEDtime = 0;
uint8_t Voice3LEDtime = 0;
uint8_t Voice4LEDtime = 0;
uint8_t Voice5LEDtime = 0;
uint8_t Voice6LEDtime = 0;
uint8_t Voice7LEDtime = 0;
uint8_t Voice8LEDtime = 0;
uint8_t VoicesLEDtime[8] = {0,0,0,0,0,0,0,0};
uint8_t VoicLEDtime = 3;
boolean PrgSelShift = false;
boolean MidiSyncSwitch = false;
boolean SEQMidiClkSwitch = false;
float OscVCFMOD = 0.0f;
uint8_t PitchWheelvalue = 127;
float PitchWheelAmt = 1.0;
uint8_t MODWheelvalue = 127;
float MODWheelAmt = 1.0;
boolean PrgChangeSW = true;
boolean SeqNotesAvailable = false;
boolean SeqSymbol = false;
uint8_t currentPatchBank = 0;
uint8_t oldPatchBank = 0;
uint8_t patchNo = 0;
float dcFilterFreq = 0.01f;
boolean FxPrgNoChange = 0;
uint8_t clkCountA [5] = {32,16,8,4,2};
uint8_t clkCountB [5] = {48,24,12,6,1};
uint8_t clkDiv = 0;
int StartDelayTime = 0;
boolean PlayFlag = false;
int ClockTime = 0;
boolean MidiClkTiming_Flag = false;
float MidiClkGateTime = 0;
int MidiClkDiv = 6;
volatile long ClkgateTime = 0;
volatile long ClkInterval = 0;
int MidiCLKcountOff = 0;
int8_t envelopeType1 = 0;
int8_t envelopeType2 = 0;
boolean cutoffScreenFlag = false;
boolean RefreshMainScreenFlag = true;
boolean clearScreenFlag = true;
const static uint8_t hysteresis = 6;		// Key query
// Filtertyp
// 1 = 12dB State Variable (Chamberlin) Filter
// 2 = 24dB LowPass Ladder Filter
int myFilter = 1; 
boolean lfo1oneShoot = false;
boolean lfo2oneShoot = false;
boolean lfo3oneShoot = false;
uint8_t lfo1ph = 0;
uint8_t lfo2ph = 0;
uint8_t lfo3ph = 0;
uint8_t LFO1mode = 0;
uint8_t LFO2mode = 0;
uint8_t LFO3mode = 0;
boolean LFO1randomFlag = false;
boolean LFO2randomFlag = false;
boolean LFO3randomFlag = false;
uint32_t LFO1delayTime = 0x02FFFF;
uint32_t LFO2delayTime = 0x02FFFF;
uint32_t LFO3delayTime = 0x02FFFF;
uint32_t LFO1fadeTime = 0x02FFFF;
uint32_t LFO2fadeTime = 0x02FFFF;
uint32_t LFO3fadeTime = 0x02FFFF;
uint32_t LFO1releaseTime = 0x02FFFF;
uint32_t LFO2releaseTime = 0x02FFFF;
uint32_t LFO3releaseTime = 0x02FFFF;
float filterFM = 0.0f;
float filterFM2 = 0.0f;
float Osc1ModAmt = 0.5f;
int8_t LFO1envCurve = +8; // exp. slow Attack
int8_t LFO2envCurve = +8; // exp. slow Attack
boolean encoderflag = false;
int encValue = 0;
int previousValue = 0;
boolean sendSysExFlag = false;