// Values below are just for initialising and will be changed when synth
// is initialised to current panel controls & EEPROM settings


byte midiChannel = MIDI_CHANNEL_OMNI;//(EEPROM)
byte midiOutCh = 0;//(EEPROM)
String patchName = INITPATCHNAME;
boolean encCW = true;//This is to set the encoder to increment when turned CW - Settings Option
float oscALevel = 1.0f;
float oscBLevel = 1.0f;
float noiseLevel = 0.0f;
int unison = 0;
int oscFX = 0;
float detune = 0.06f;
//float currentDetune = 0.0f;
uint32_t chordDetune = 0;
float lfoSyncFreq = 1.0f;
float midiClkTimeInterval = 0.0f;
float lfoTempoValue = 1.0f;
int pitchBendRange = 12;
float modWheelDepth = 1.0f;
float keytrackingAmount = 0.5f;//Half - MIDI CC & settings option
float keytrackingValue = 0;
float glideSpeed = 0.0f;
int oscPitchA = 0;
int oscPitchB = 12;
int oscTranspose = 0;
float oscMasterTune = 0.0f;
float pitchEnv = 0.0f;
float pitchEnvA = 0.0f;
float pitchEnvB = 0.0f;
int oscWaveformA = WAVEFORM_SQUARE;
int oscWaveformB = WAVEFORM_SQUARE;
int currentWaveformA = oscWaveformA;
int currentWaveformB = oscWaveformB;
int currentOsc1WaveBank = 0;
int currentOsc2WaveBank = 0;
float pwmAmtA = 1.0f;
float pwmAmtB = 1.0f;
float pwmRate = 0.5f;
float pwmRateA = 0.5f;
float pwmRateB = 0.5f;
float pwA = 0.0f;
float pwB = 0.0f;
float mypwA = 0.0f;
float mypwB = 0.0f;
int pwmSource = PWMSOURCELFO;
float myFilVelocity = 0.0f;
float myAmpVelocity = 0.0f;

//float filterRes = 1.1f; // Filter_variable
float filterRes = 0.0f; // Ladder Filter
float HPFRes = 0.0f;  // HP Filter
float SVF_filterRes = 0.0f;
float LAD_filterRes = 0.0f;
float filterFreq = 18000.0f;
float HPF_filterFreq = 2000.0f;
uint8_t HPF_filterFreq_value = 0;
uint8_t HPF_Res_value = 0;
float filterOctave = 6.9999f;
float filterMix = 0.0f;
int filterMixStr = 0;//For display
float filterEnv = 0.0f;
float oscLfoAmt = 0.0f;
float ccModwheelAmt = 0.0f;
float ccModwheelCutoffAmt = 0.0f;
float oscLfoRate = 4.0f;
float Lfo3Rate = 4.0f;
float Lfo3amt  = 0.000016f;
int oscLFOWaveform = WAVEFORM_ARBITRARY1;
int oscLfoRetrig = 0;
int oscLFOMidiClkSync = 0;//MIDI Only
String oscLFOTimeDivStr = "";//For display
float filterLfoRate = 2.0f;
int filterLfoRetrig = 0;
int filterLFOMidiClkSync = 0;
String filterLFOTimeDivStr = "";//For display
float filterLfoAmt = 0.0f;
int filterLfoWaveform = WAVEFORM_ARBITRARY2;
int myFilterLFORateValue = 0;

float filterAttack = 100.0f;
float filterDecay = 350.0f;
float filterSustain = 0.7f;
float filterRelease = 300.0f;
float filterDelay = 0.0f;
float filterHold = 0.0f;

float ampAttack = 10.0f;
float ampDecay = 35.0f;
float ampSustain = 1.0f;
float ampRelease = 300.0f;
float ampDelay = 0.0f;
float ampHold = 0.0f;
float fxAmt = 1.0f;
float fxMix = 0.0f;
float ModWheelCutoffAmt = 0.0f;
uint8_t FxPot1Val = 0;
uint8_t FxPot2Val = 0;
uint8_t FxPot3Val = 0;
uint8_t FxPot4Val = 0;
uint8_t FxPot1amt = 0;
uint8_t FxPot2amt = 0;
uint8_t FxPot3amt = 0;
uint8_t FxCLKamt = 0;
uint8_t FxMIXamt = 0;
int velocitySens = 0;//Default off - settings option
boolean vuMeter = false;
boolean ARPSEQstatus = 0;
boolean myFxDSP = true;
uint8_t myPageShiftStatus [13] = {0,0,0,0,0,0,0,0,0,0,0,0,0};
float driveLevel = 1.0f;
uint8_t myUnisono = 0;
uint8_t SDErrorFlag = 0;
uint8_t WShaperNo = 0;
float WShaperDrive = 1.0f;
uint8_t PatchBankNo = 0;
uint8_t SeqNote1Buf[64];
uint8_t SeqNoteCount[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
uint8_t SeqVeloBuf[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
uint8_t SeqNoteBufStatus[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
uint8_t SeqOctavStep[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
boolean SEQrunStatus = false;
boolean SEQrunOneNote = false;
uint8_t SEQPatternNo = 0;
uint8_t oldPatternNo = 1;
String patternName = INITPATTERNNAME;
uint8_t SeqRecNoteCount = 0;
uint8_t SeqSmallestNoteStep = 0;
int ErrorCount = 0;
volatile boolean PrgChangeTask = false;
boolean SEQRecNoteFlag = false;

//Pick-up - Experimental feature
//Control will only start changing when the Knob/MIDI control reaches the current parameter value
//Prevents jumps in value when the patch parameter and control are different values
boolean pickUp = true;//settings option (EEPROM)
boolean pickUpActive = true;
#define TOLERANCE 2 //Gives a window of when pick-up occurs, this is due to the speed of control changing and Mux reading
int filterfreqPrevValue = 0;//Need to set these when patch loaded
boolean cutoffPickupFlag = false;
float filterMixPrevValue = 0.0f;//Need to set these when patch loaded
float resonancePrevValue = 0.0f;//Need to set these when patch loaded
float oscLfoAmtPrevValue = 0.0f;//Need to set these when patch loaded
float oscLfoRatePrevValue = 0.0f;//Need to set these when patch loaded
float filterLfoRatePrevValue = 0.0f;//Need to set these when patch loaded
float filterLfoAmtPrevValue = 0.0f;//Need to set these when patch loaded
float fxAmtPrevValue = 0.0f;//Need to set these when patch loaded
float fxMixPrevValue = 0.0f;//Need to set these when patch loaded
uint8_t LFO1phase = 180;
uint8_t LFO2phase = 180;
uint16_t CPUdegree = 0;
uint16_t CPUdegree_temp = 0;
uint8_t CPUaudioMem = 0;
uint8_t CPUmem = 0;
int8_t SEQselectStepNo = 0;
uint8_t SEQpitchValue = 0;
unsigned long SEQclkRate = 1000000; // 60BPM (20- 275BPM)
float SEQdivValue = 0.25f;
uint16_t SEQbpmValue = 50;
uint8_t SEQdividerValue = 0;
uint8_t SEQstepNumbers = 15;
uint8_t SEQstepTime = 0.5f;
uint8_t SEQdirection = 0;
boolean SEQdirectionFlag = false;
uint8_t SEQmode = 0;
int SeqTranspose = 0;
int dummy1;
int dummy2;
boolean Keylock = false;
float SEQGateTime = 2.0f;	// 1.01f - 15.0f
uint32_t gateTime = 0;
uint32_t Interval = 0;
int oscDetuneSync = 1;
uint8_t Voice1LEDtime = 0;
uint8_t Voice2LEDtime = 0;
uint8_t Voice3LEDtime = 0;
uint8_t Voice4LEDtime = 0;
uint8_t Voice5LEDtime = 0;
uint8_t Voice6LEDtime = 0;
uint8_t Voice7LEDtime = 0;
uint8_t Voice8LEDtime = 0;
uint16_t VoicesLEDtime[8] = {0,0,0,0,0,0,0,0};
uint8_t VoicLEDtime = 2;
boolean PrgSelShift = false;
boolean MidiSyncSwitch = false;
boolean SEQMidiClkSwitch = false;
float OscVCFMOD = 0.0f;
uint8_t PitchWheelvalue = 127;
float PitchWheelAmt = 1.0;
uint8_t MODWheelvalue = 127;
float MODWheelAmt = 1.0;
boolean PrgChangeSW = true;
boolean PickupSW = true;
boolean SeqNotesAvailable = false;
boolean SeqSymbol = false;
uint8_t currentPatchBank = 0;
uint8_t oldPatchBank = 0;
uint8_t patchNo = 0;
float dcFilterFreq = 0.01f;
boolean FxPrgNoChange = 0;
uint8_t clkCountA [5] = {32,16,8,4,2};
uint8_t clkCountB [5] = {48,24,12,6,1};
uint8_t clkDiv = 0;
int StartDelayTime = 0;
boolean PlayFlag = false;
int ClockTime = 0;
boolean MidiClkTiming_Flag = false;
float MidiClkGateTime = 0;
int MidiClkDiv = 6;
volatile long ClkgateTime = 0;
volatile long ClkInterval = 0;
int MidiCLKcountOff = 0;
int8_t envelopeType1 = 0;
int8_t envelopeType2 = 0;
boolean cutoffScreenFlag = false;
boolean RefreshMainScreenFlag = true;
boolean clearScreenFlag = true;
const static uint8_t hysteresis = 6;		// Key query
// Filtertyp
// 1 = 12dB State Variable (Chamberlin) Filter
// 2 = 24dB LowPass Ladder Filter
int myFilter = 1;
boolean lfo1oneShoot = false;
boolean lfo2oneShoot = false;
boolean lfo3oneShoot = false;
int8_t Lfo3Modoutput = 0;
uint8_t lfo1ph = 0;
uint8_t lfo2ph = 0;
uint8_t lfo3ph = 0;
uint8_t LFO1mode = 0;
uint8_t LFO2mode = 0;
uint8_t LFO3mode = 0;
boolean LFO1randomFlag = false;
boolean LFO2randomFlag = false;
boolean LFO3randomFlag = false;
uint32_t LFO1delayTime = 0x02FFFF;
uint32_t LFO2delayTime = 0x02FFFF;
uint32_t LFO3delayTime = 0x02FFFF;
uint32_t LFO1fadeTime = 0x02FFFF;
uint32_t LFO2fadeTime = 0x02FFFF;
uint32_t LFO3fadeTime = 0x02FFFF;
uint32_t LFO1releaseTime = 0x02FFFF;
uint32_t LFO2releaseTime = 0x02FFFF;
uint32_t LFO3releaseTime = 0x02FFFF;
float filterFM = 0.0f;
float filterFM2 = 0.0f;
float Osc1ModAmt = 0.5f;
int8_t LFO1envCurve = +8; // exp. slow Attack
int8_t LFO2envCurve = +8; // exp. slow Attack
boolean encoderflag = false;
int encValue = 0;
int previousValue = 0;
boolean sendSysExFlag = false;
long sysexChecksum;
boolean sysexDest = false;
uint8_t sysexTyp = 0;
uint8_t sysexBank = 0;
uint8_t sysexSource = 0;
boolean sysexDump = false;
boolean midiCtlChangeFlag = false;
String patchname;
boolean KeyLED1State = false;
boolean KeyLED2State = false;
boolean KeyLED3State = false;
boolean KeyLED4State = false;
boolean sysexRecTimeStatus = false;
boolean sysexInit = true;
boolean time_sysexRecStatus = false;
boolean Showprogressbar = false;
boolean progressBarFlag = false;
uint8_t progressBarPercent = 0;
uint8_t progressBarCount = 0;
uint16_t progressBarTime = 0;
long timer_Progressbar = 3000;
long timer_sysexwait = 126;
boolean timer_ProgressbarFlag = false;
uint16_t sysexDataLenght = 0;
int PrevValue[4] = {0,0,0,0};
boolean PrevFlag[4] = {0,0,0,0};
boolean pickupFlag = true;
boolean SourceDisabled = false;
uint8_t SysEx_Cache[512];
boolean ProgBar_enabled = false;		// Progress Bar values
uint8_t ProgBar_style = 0;
uint8_t ProgBar_count = 0;
uint8_t Progbar_maxcount = 0;
String Progbar_string = INITPATCHNAME;
uint8_t LFOnumber = 0;
int LFO3shape = 0;
uint8_t Lfo3Waveform = 0;
uint8_t Lfo3Retrig = 0;
uint8_t LFO3phase = 0;
int8_t LFO3envCurve = +8;
int8_t LFO3envCurveTest = +8;
int myLFO1RateValue = 0;
int myLFO2RateValue = 0;
int myLFO3RateValue = 0;
String LFO3TimeDivStr = "";//For display
float Lfo3Amt = 0.0f;
uint8_t AtouchAmt = 0;
float AtouchCutoff = 0.0f;
uint8_t AtouchPitchAmt = 0;
float AtouchPitch = 0.0f;
uint8_t AtouchLFO1Amt = 0;
uint8_t AtouchLFO2Amt = 0;
uint8_t AtouchLFO3Amt = 0;
float AtouchLFO1amt = 0.0f;
float AtouchLFO2amt = 0.0f;
float AtouchLFO3amt = 0.0f;
float FilterVoltage = 1.0f;
uint8_t AfterTouchValue = 0;
uint8_t AtouchFxMixAmt = 0;
uint8_t AtouchFxClkAmt = 0;
uint8_t AtouchFxP1Amt = 0;
uint8_t AtouchFxP2Amt = 0;
uint8_t AtouchFxP3Amt = 0;
uint8_t AtouchFxP1amt = 0;
float AtouchFxP2amt = 0.0f;
float AtouchFxP3amt = 0.0f;
float AtouchFxCLKamt = 0.0f;
uint8_t AtouchFxMIXamt = 0;
uint8_t PWMaShape = 0;
uint8_t PWMbShape = 0;
boolean EnvelopeIdle = true;
uint8_t UserPot [4] = {1,2,0,0};
uint8_t UserPot1 = 0;
uint8_t UserPot2 = 1;
uint8_t UserPot3 = 2;
uint8_t UserPot4 = 3;
long Poll_counter = 0;
boolean voiceLEDflag = false;
uint8_t Voice_LED_State[8] = {0,0,0,0,0,0,0,0};
uint8_t blinkiTime = 250;
boolean blink = false;

uint8_t SupersawSpreadA = 0;
uint8_t SupersawSpreadB = 0;
uint8_t SupersawMixA = 63;
uint8_t SupersawMixB = 63;
/*
float Supersaw_gain1A = 0.300f;
float Supersaw_gain2A = 0.175f;
float Supersaw_gain1B = 0.300f;
float Supersaw_gain2B = 0.175f;
*/

float Supersaw_gain1A = 0.0f;
float Supersaw_gain2A = 0.0f;
float Supersaw_gain1B = 0.0f;
float Supersaw_gain2B = 0.0f;

boolean ccSustain = false;
boolean voiceSustain[8] = {0,0,0,0,0,0,0,0};
uint16_t rng_state = 1;
uint8_t Voice_mode = 0;
uint8_t NoteStack_size = 8;
uint8_t NoteStack_pool[8];
uint8_t NoteStack_ptr = 0;
int pan_value = 0;
uint8_t current_velocity;
// 8 voices and notes
struct VoiceAndNote {
	int note;
	long timeOn;
	int voiceOn;
};
struct VoiceAndNote voices[NO_OF_VOICES] = {{ -1, 0, 0}, { -1, 0, 0}, { -1, 0, 0},
{ -1, 0, 0}, { -1, 0, 0}, { -1, 0, 0}, { -1, 0, 0}, { -1, 0, 0}};
int notesOn = 0;
int prevNote = 48;//This is for glide to use previous note to glide from
byte note = 0;
long earliestTime = millis(); //For voice allocation - initialise to now
int voiceToReturn = -1; //Initialise
boolean TempoLEDchange = false;
boolean TempoLEDstate = false;
uint32_t timer_intMidiClk = 0;   // interval Intern Midi Clock ms
boolean SEQStepStatus = false;	// Sequencer red frame
uint16_t FxClkRate = 32000;
uint8_t myBoost = 0;
uint8_t LadderFilterpassbandgain = 0;
uint8_t LadderFilterDrive = 0;
String currentPatchName = "            ";
int newPatchNo = 1;
int newPatchBank = 0;
boolean clrSEQflag = false;


uint32_t state = 0;
int PageNr = 0;				// global
int PageNr_old = 0;			// global
int LastPageNr = 0;
int Number_of_Pages = 10;
uint8_t ParameterNrMem[14] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0};
uint8_t ParameterNr = 0;
boolean tftUpdate =  true;
boolean ParUpdate = true;
boolean Init_flag = true;
long timer_Temperature = 2011;	// Measurement interval time (ms)
long timer_CPUmon = 577;		// Measurement interval time (ms)
long timer_keyquery = 1;       // Key query interval time 1ms
long timer_keyquery1 = 1;
long timer_encquery = 20;       // Encoder query interval time 1ms
long timer_potquery = 50;       // pot query interval time 50ms
long timer_prgChange = 100;		// programm Change
long timer_banksel = 100;		// Bank Select
long timer_sysexRec = 5000;		// wait receive sysex data
//uint32_t timer_intMidiClk = 0;   // interval Intern Midi Clock ms
unsigned long timer_extMidiClk = 0;   // interval Intern Midi Clock ms
unsigned long timer_envelopeMonitor = 0;
int WaveNr = 0;
uint8_t Osc1WaveBank = 0;
uint8_t Osc2WaveBank = 0;
uint8_t FilterTyp = 0;			// LowPass
uint8_t FilterEnv = 0;
uint8_t FilterCut = 0;			// Cutoff level for drawing	filter curve
uint8_t FilterCutPrev = 0;
uint8_t FilterRes = 0;			// Resonance level for drawing Filter curve
uint8_t FilterMix = 0;
//uint8_t LadderFilterDrive = 0;
//uint8_t LadderFilterpassbandgain = 0;
uint8_t Env1Atk = 0;
uint8_t Env1Dcy = 0;
uint8_t Env1Sus = 0;
uint8_t Env1Rel = 0;
uint8_t Env2Atk = 0;
uint8_t Env2Dcy = 0;
uint8_t Env2Sus = 0;
uint8_t Env2Rel = 0;
uint16_t KeyDebounce = 50;
uint8_t KeyDebounce_less = 50;
uint8_t KeyStatus = 0;
uint8_t S1KeyStatus = 0;
uint8_t S2KeyStatus = 0;
uint8_t S3KeyStatus = 0;
uint8_t S4KeyStatus = 0;
uint8_t S5KeyStatus = 0;
uint8_t S6KeyStatus = 0;
uint8_t S7KeyStatus = 0;
uint8_t HC595Register = 0;
uint8_t FxPrgNo = 0;
uint8_t FxMixValue = 0;
uint8_t _FxMixValue = 0;
uint8_t FxTimeValue = 0;
uint8_t FxFeedbackValue = 0;
//uint8_t FxParameter3Value = 0;
uint8_t FxPot1value = 0;
uint8_t FxPot2value = 0;
uint8_t FxPot3value = 0;
uint8_t myFxSelValue = 0;
uint8_t myFxValValue = 0;
//uint16_t FxClkRate = 32000;
uint8_t myLFO1shapeNo = 0;
uint8_t myLFO2shapeNo = 0;
uint8_t myLFO3shapeNo = 0;
const byte channel = 1;
//byte note = 0;
byte velocity = 0;
uint8_t MidiStatusSymbol = 0;  // 0:off, 1:on; 2: wait to off
uint16_t MidiStatusHoldTime = 0;
//Bounce btnBouncer = Bounce(PAGE_SW, 50);
boolean PAGE_SW_Status = 1;
boolean BassBoostStatus = 0;
//uint8_t myBoost = 0;
boolean initStatus = 1;
//boolean initStatus2 = 1;
boolean unisoFlashStatus = 0;
float oscGainLevel = 1.0;
const static uint32_t  WAVEFORM_PARABOLIC = 103;
const static uint32_t WAVEFORM_HARMONIC = 104;
unsigned long timer = 0;
unsigned long timer1 = 0;
unsigned long timer2 = 0;
unsigned long timer3 = 0;
unsigned long timer4 = 0;
unsigned long timer5 = 0;
unsigned long timer6 = 0;
unsigned long timer7 = 0;	// refresh menu header (VU, Midi note and voice lamps)
unsigned long timer8 = 0;	// turns off sound when switching patches
boolean mute_sound = true;
int sysex_buf_pointer = 0;
uint8_t Syx_Buf[512];
boolean SeqStepClk = false;
uint8_t last_modwheel_value = 0;

